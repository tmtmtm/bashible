#!/usr/bin/env bash

# bashible
# (c) Jan Molic 2016
# https://github.com/mig1984/bashible

bashible_version() {
  echo 3.0.1
}

### INTERNAL FUNCTIONS (CAMEL CASE) ####

bashibleHelp() {
  echo "usage: bashible script.ble"
  echo
  echo "see also: https://github.com/mig1984/bashible"
  echo
  exit 1
}

absolutePath () ( 
  cd $(dirname $1) 2>/dev/null && echo "$(pwd)/${1##*/}"; 
)

printStart() {
  echo -e "\n\033[1;37;45m ${_BLE_NAV} \033[1;37;44m START \033[0m" >&2
}

printBlock() {
  echo -e "\n\033[1;37;45m ${_BLE_NAV} \033[1;37;44m $* \033[0m" >&2
}

printFinish() {
  echo -e "\n\033[1;37;45m ${_BLE_NAV} \033[1;37;44m FINISH \033[0m" >&2
}

printTask() {
  echo -e "\033[37m - $* \033[0m" >&2
}

runScript() {
  local cmd=$1 path
  shift # shift the script name, pass other args as $1, $2, etc.

  path=`absolutePath "$cmd"` || # get absolute path
    fail "is the script '$cmd' correct? (got an empty path on readlink)"

  _BASE_DIR=`dirname "$path"`
  _ORIG_BASE_DIR=${_BASE_DIR}
  echo "$path $*" >> "${_BLE_CALLED}" || fail "can't write to _BLE_CALLED file (${_BLE_CALLED})"

  if test ${#_BLE_NAV} -eq 0 ; then
    _BLE_NAV="`basename $path | sed "s/\.ble\$//" `"
  else
    _BLE_NAV="${_BLE_NAV} -> `basename $path | sed "s/\.ble\$//" `"
  fi

  printStart
  cd "${_BASE_DIR}" || fail "can't enter base dir '${_BASE_DIR}'"
  source ./`basename "$path"` || fail "failure in $path (in $PWD)"
  printFinish
}

### CORE FUNCTIONS ###

@() {
  _BLOCKS_STARTED=1
  _SKIP=0
  cd "${_BASE_DIR}" || fail "can't chdir to base dir '${_BASE_DIR}'"
  printBlock "$*"
}

-() {
  if test "${_SKIP}" -ne 1 ; then
    printTask "$*"
    "$@" || fail "command '$@' failed (in `pwd`)";
  fi
}

base_dir() {
  _BASE_DIR=`absolutePath "$1"` || # get absolute path
    fail "base_dir: absolutePath '$1' failed"
  cd "${_BASE_DIR}" || fail "can't chdir to base dir '${_BASE_DIR}'"
}

call() { 
  local script=$1 path
  shift
  path=`absolutePath "$script"` || # get absolute path
    fail "is the path of call '$script' correct? (got empty path on readlink)"
  if ! grep -q -e "$path $*" < "${_BLE_CALLED}"; then
    force_call "$path" "$@"
  fi
}

delayed_call() {
  absolutePath "$1" >> "${_BLE_DELAYED}" || fail "can't write to _BLE_DELAYED file (${_BLE_DELAYED})"
}

empty() {
  quiet type $1 || fail "empty: command '$1' not found"
  local buf
  eval "
    buf=\"\`  \"\$@\"  \`\"
  "
  local ex=$?
  echo "$buf"
  if test $ex -gt 0; then
    fail "empty: command '$@' exited $ex"
  fi
  test ${#buf} -eq 0 # is returned
}

evaluate() {
  eval "$@" || { local ex=$?; print_info "evaluate: warning: command '$@' exited $ex"; return $ex; }
}

export_var() {
  local name=$1
  if test ${#2} -gt 0; then
    quiet type $2 || fail "export_var: command '$2' not found"
    set_var "$@"
  fi
  eval "
    export $name
  "
}

fail() {
  echo -e "\n\033[1;37;45m ${_BLE_NAV} \033[1;37;41m $*, exiting \033[0m" >&2
  exit 1
}

finish() {
  print_info "finishing execution of the script$@"
  printFinish
  exit 0
}

finish_if() {
  quiet type $1 || fail "finish_if: command '$1' not found"
  "$@" && finish || return 0
}

force_call() {
  local script=$1 path
  shift # shift the script name, pass other args as $1, $2, etc.
  path=`absolutePath "$script"` || # get absolute path
    fail "is the path of called script '$script' correct? (got empty path on readlink)"
  _BLE_LEVEL=$((_BLE_LEVEL + 1)) "${_BASHIBLE}" "$path" "$@" || exit 1
}

halt() {
  print_error "halting execution$@"
  printFinish
  exit 1
}

halt_if() {
  quiet type $1 || fail "halt_if: command '$1' not found"
  "$@" && halt || return 0
}

may_fail() {
  quiet type $1 || fail "may_fail: command '$1' not found"
  "$@"
  return 0
}

not() {
  quiet type $1 || fail "not: command '$1' not found"
  "$@" && return 1 || return 0
}

print_error() {
  echo -e "   \033[31m($*)\033[0m" >&2
}

print_warn() {
  echo -e "   \033[31m($*)\033[0m" >&2
}

print_info() {
  echo -e "   \033[32m($*)\033[0m" >&2
}

quiet() {
  "$@" >/dev/null 2>&1
}

reset_base_dir() {
  _BASE_DIR=${_ORIG_BASE_DIR}
  cd "$_BASE_DIR"
}

set_var() {
  local name=$1; shift
  local value;
  quiet type "$1" || fail "set_var: command '$1' not found"
  if ! value=`  "$@"  `; then
    fail "set_var: command '$@' has failed"
  fi
  print_info "$name=$value"
  eval "$name=\$value"
}

skip() {
  print_info "skipping following tasks$@"
  _SKIP=1
}

skip_if() {
  quiet type "$1" || fail "skip_if: command '$1' not found"
  "$@" && skip || return 0
}

template() {
  local path=$1
  local res
  test "$#" -ge 2 && res=$2 || res=/dev/stdout
  local orig_nav=${_BLE_NAV}
  (
    export _BLE_NAV="${_BLE_NAV} (in $path)"
    exec 3>&1
    set -u
    stderr=` eval "
cat <<END_OF_BLEMPLATE
$(< "${path}" )
END_OF_BLEMPLATE" </dev/stdin 2>&1 1>&3
`
    test "${#stderr}" -eq 0 || { echo $stderr>/dev/stderr; print_error "template '$path' failed"; return 1; }
  ) > $res
}

toplevel() {
  test "${_BLE_LEVEL}" -eq 0
}

var_empty() {
  local var=$1
  eval "test \${#$var} -eq 0"
}

when() {
  if eval "$1"; then
    shift
    "$@"
  fi
}

unless() {
  if ! eval "$1"; then
    shift
    "$@"
  fi
}

### USEFUL HELPERS ###

add_line() {
  local line=$1
  local path=$2
  quiet head -n 1 "$path" || { print_error "add_line: can't read file '$path'"; return 1; }
  if ! quiet grep -F "$line" "$path"; then
    echo "$line" >> "$path" || { print_error "add_line: can't write to file '$path'"; return 1; }
  else
    print_info "already"
  fi
}

append_line() {
  local line=$1
  local path=$2
  quiet tail -n 1 "$path" || { print_error "append_line: can't read file '$path'"; return 1; }
  if test "` tail -n 1 "$path" `" != "$line" ; then
    echo "$line" >> "$path" || { print_error "append_line: can't write to file '$path'"; return 1; }
  else 
    print_info "already"
  fi
}

comment_line_matching() {
  local match=$1
  local path=$2
  test ${#match} -eq 0 && { print_error "comment_line_matching: empty regexp is not allowed!"; return 1; }
  test ! -f "$path" && { print_error "comment_line_matching: file '$path' not found"; return 1; }
  sed -i -r 's'${_DEL}'^([^#]*'"$match"'.*)$'${_DEL}'#\1'${_DEL} "$path"
}

i_am() {
  test "${USER}" = "$@"
}

prepend_line() {
  local line=$1
  local path=$2
  quiet head -n 1 "$path" || { print_error "prepend_line: can't read file '$path'"; return 1; }
  if test "` head -n 1 "$path" `" != "$line" ; then
    cat - "$path" <<< "$line" > "$path.tmp"
    mv "$path.tmp" "$path"
    #sed -i "1i \\ $line" "$path" || { print_error "prepend_line: can't edit file '$path'"; return 1; }
  else
    print_info "already"
  fi
}

remove_line_matching() {
  local match=$1
  local path=$2
  test ${#match} -eq 0 && { print_error "remove_line_matching: empty regexp is not allowed!"; return 1; }
  test ! -f "$path" && { print_error "remove_line_matching: file '$path' not found"; return 1; }
  sed -i "${_DEL}$line${_DEL}d" "$path" || { print_error "remove_line_matching: can't edit file '$path'"; return 1; }
}

replace_matching() {
  local match=$1
  local replace=$2
  local path=$3
  test ${#match} -eq 0 && { print_error "replace_matching: empty regexp is not allowed!"; return 1; }
  test ! -f "$path" && { print_error "replace_matching: file '$path' not found"; return 1; }
  sed -i -r "s${_DEL}$match${_DEL}$replace${_DEL}g" "$path"
}

replace_line_matching() {
  local match=$1
  local replace=$2
  local path=$3
  test ${#match} -eq 0 && { print_error "replace_line_matching: empty regexp is not allowed!"; return 1; }
  test ! -f "$path" && { print_error "replace_line_matching: file '$path' not found"; return 1; }
  sed -i -r "s${_DEL}.*$match.*${_DEL}$replace${_DEL}g" "$path"
}

timeout() {
  local time=$1; shift
  ( "$@" ) & pid=$!
  ( sleep $time && kill -HUP $pid ) 2>/dev/null & killer=$!
  if ! wait $pid; then
    print_error "timeout expired"
    return 1
  else
    pkill -HUP -P $killer
    wait $killer
    return 0
  fi
}

uncomment_line_matching() {
  local match=$1
  local path=$2
  test ${#match} -eq 0 && { print_error "uncomment_line_matching: empty regexp is not allowed!"; return 1; }
  test ! -f "$path" && { print_error "uncomment_line_matching: file '$path' not found"; return 1; }
  sed -i -r 's'${_DEL}'^ *#(.*'"$match"'.*)$'${_DEL}'\1'${_DEL} "$path"
}

wait_for_tcp() {
  local what=$1
  local up=$2
  if test "$up" = up ; then
    while ! netstat -lant | grep "$what" | grep -q 'LISTEN'; do sleep 1; done
  elif test "$up" = down ; then
    while netstat -lant | grep "$what" | grep -q 'LISTEN'; do sleep 1; done
  else
    fail "wait for '$up'? (expected up|down)"
  fi
  return 0
}

write_to() {
  local path=$1; shift
  local value;
  quiet type "$1" || fail "write_to: command '$1' not found"
  if ! value=`  "$@"  `; then
    fail "write_to: command '$@' has failed"
  fi
  if ! echo "$value" > $path; then
    fail "write_to: write failed"
  fi
}

#### START #####

# when using "cat foobar | while read line", it will fail if the cat fails and the block ends like "done || fail"
set -o pipefail

# setup environment variables; these and other prefixed with _BLE (see below) are passed to child (called) scripts

let _BLE_LEVEL=${_BLE_LEVEL}+0    # >1 indicates a child script
export _BLE_LEVEL
export _BLE_NAV                   # navigation; is set in the parent, not here

# setup variables (these are per script only)
_BASHIBLE=`absolutePath "$0"` ||  # the bashible script itself
   fail "can't get _BASHIBLE ??"
_HOSTNAME=`hostname`
test ${#_HOSTNAME} -gt 0 || fail "got no hostname"
_SKIP=0                      # skipping mode? reseted on next block
_BASE_DIR=''                 # will be set by runScript
_ORIG_BASE_DIR=''            # will be set by runScript
_DEL=` printf '\x1' `        # regexp delimiter


# Help?
if test "$1" = -h -o "$1" = --help ; then
  bashibleHelp
  exit 0
fi

# No script passed?
if test ${#1} -eq 0; then
  bashibleHelp
  exit 1
fi

# Finally run the script!
if test "${_BLE_LEVEL}" = 0 ; then

  # a script path is passed as the first argument and this is the top script

  if quiet which tempfile; then
    export _BLE_DELAYED=`tempfile` # will be called at the end
    export _BLE_CALLED=`tempfile`  # already called playbooks
  else
    export _BLE_DELAYED=/tmp/bashible-$$.delayed
    export _BLE_CALLED=/tmp/bashible-$$.called
    touch "${_BLE_DELAYED}" || fail "can't touch ${_BLE_DELAYED}"
    touch "${_BLE_CALLED}" || fail "can't touch ${_BLE_CALLED}"
  fi

  # run the script (and pass extra parameters, too)
  runScript "$@"

  # at the end call delayed commands (the call doesn't do them twice even if they are multiple times in the file)
  export _BLE_NAV='DELAYED'
  while read path; do
    call "$path"
  done < "${_BLE_DELAYED}"

  # cleanup
  rm "${_BLE_CALLED}"
  rm "${_BLE_DELAYED}"

else

  # a script path is passed as the first argument and this is a child script

  # run the script (and pass extra parameters, too)
  runScript "$@"

fi
